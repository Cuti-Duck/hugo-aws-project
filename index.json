[
{
	"uri": "/3/3.1.-blog-1/",
	"title": "Blog 1",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/3/3.2.-blog-2/",
	"title": "Blog 2",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/3/3.3.-blog-3/",
	"title": "Blog 3",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/3/3.4.-blog-4/",
	"title": "Blog 4",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/3/3.5.-blog-5/",
	"title": "Blog 5",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/3/3.6.-blog-6/",
	"title": "Blog 6",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/",
	"title": "Session Management",
	"tags": [],
	"description": "",
	"content": "Internship Report Student Information Full Name: Doan Ngoc Khanh Phone Number: 0961067440 Email: khanhdnse180587@fpt.edu.vn\nUniversity: FPT University Major: Class: AWS092025\nInternship Company: Amazon Web Services Vietnam Co., Ltd.\nInternship Position: FCJ Cloud Intern\nInternship Duration: From 08/09/2025 to \u0026hellip;/2025\nReport Content Worklog Proposal Translated Blogs Events Participated Workshop Self-Assessment Sharing and Feedback "
},
{
	"uri": "/1/1.1-week1/",
	"title": "Week 1 Worklog",
	"tags": [],
	"description": "",
	"content": "Week 1 Objectives: Connect and get acquainted with members of First Cloud Journey. Set up AWS account and establish security foundation with IAM. Configure development environment with Hugo for documentation. Master AWS Management Console navigation and basic operations. Implement cost management and monitoring practices. Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 2 Creating my first AWS account 09/08/2025 09/08/2025 Link 3 Create Admin Group and Admin User 09/09/2025 09/09/2025 Link 4 Setting Hugo 09/10/2025 09/10/2025 5 Explore and Configure AWS Management Console 09/11/2025 09/11/2025 Link 6 Create Budget by Template 09/12/2025 09/12/2025 Link Week 1 Achievements: Successfully created my first AWS account (Day 2)\nSet up AWS Free Tier account Completed account verification and initial setup Established proper IAM security foundation (Day 3)\nCreated Admin Group with appropriate permissions Created Admin User and assigned to Admin Group Implemented security best practices for account access Set up Hugo static site generator (Day 4)\nInstalled and configured Hugo for documentation Created project structure for workshop documentation Mastered AWS Management Console navigation (Day 5)\nExplored and configured AWS Management Console Learned to locate and access various AWS services Understood console layout and service organization Implemented cost management practices (Day 6)\nCreated Budget using AWS template Set up cost monitoring and alerts Learned about AWS billing and cost optimization Connected with First Cloud Journey community\nEngaged with fellow learners and mentors Established learning network for ongoing support "
},
{
	"uri": "/1/",
	"title": "Worklog",
	"tags": [],
	"description": "",
	"content": "On this page, you will need to introduce your worklog. How did you complete it? How many weeks did you take to complete the program? What did you do in those weeks?\nTypically, and as a standard, a worklog is carried out over about 3 months (throughout the internship period) with weekly contents as follows:\nWeek 1: Getting familiar with AWS and basic AWS services Week 2: Doing task A…\nWeek 3: Doing task B…\nWeek 4: Doing task C…\nWeek 5: Doing task D…\nWeek 6: Doing task E…\nWeek 7: Doing task G…\nWeek 8: Doing task H…\nWeek 9: Doing task I…\nWeek 10: Doing task L…\nWeek 11: Doing task M…\nWeek 12: Doing task N…\n"
},
{
	"uri": "/2/",
	"title": "Proposal ",
	"tags": [],
	"description": "",
	"content": "Video Sharing Platform 1.Executive Summary This proposal outlines the development of a scalable Video Sharing Platform leveraging AWS cloud services. The platform will enable users to upload, stream, and share video content with features including user authentication, content management, and real-time video streaming.\nKey objectives:\nBuild a secure, scalable video sharing platform Implement user authentication and authorization Provide high-quality video streaming capabilities Ensure cost-effective infrastructure management Deliver seamless user experience across devices The solution utilizes AWS services including Amplify for frontend hosting, Cognito for authentication, S3 for storage, CloudFront for content delivery, and Interactive Video Service for streaming capabilities.\n2.Problem Statement What\u0026rsquo;s the Problem? Current video sharing solutions face several challenges:\nHigh infrastructure costs for video storage and streaming Complex setup and maintenance requirements Limited scalability during peak usage Security vulnerabilities in user authentication Poor video quality and buffering issues Lack of real-time analytics and monitoring The Solution Our AWS-based video sharing platform addresses these challenges by:\nLeveraging AWS\u0026rsquo;s cost-effective, pay-as-you-use pricing model Utilizing managed services to reduce operational overhead Implementing auto-scaling capabilities for handling traffic spikes Providing enterprise-grade security through AWS Cognito and WAF Delivering high-quality video streaming via Amazon IVS and CloudFront Offering comprehensive monitoring and analytics through CloudWatch Benefits and Return on Investment Cost Savings:\n40-60% reduction in infrastructure costs compared to traditional hosting No upfront hardware investments required Pay-per-use model optimizes operational expenses Performance Improvements:\n99.9% uptime availability Global content delivery with low latency Auto-scaling handles 10x traffic increases seamlessly Business Value:\nFaster time-to-market (3-6 months vs 12+ months) Enhanced user experience drives higher engagement Scalable architecture supports business growth 3.Solution Architecture AWS Services Used Route 53: DNS service for domain management and traffic routing with health checks and failover capabilities.\nAmplify: Frontend hosting and deployment platform for React/Vue.js applications with CI/CD integration.\nCognito: User authentication and authorization service providing secure sign-up, sign-in, and access control.\nWAF: Web Application Firewall protecting against common web exploits and DDoS attacks.\nApp Runner: Containerized backend API hosting with automatic scaling and load balancing.\nDynamoDB: NoSQL database for storing user profiles, video metadata, and application data.\nS3: Object storage for video files, thumbnails, and static assets with versioning and lifecycle policies.\nCloudFront: Global CDN for fast content delivery and video streaming with edge caching.\nAmazon Interactive Video Service: Real-time video streaming service for live broadcasts and on-demand content.\nCloudWatch: Monitoring and logging service for application performance, metrics, and alerts.\nCode Pipeline: CI/CD pipeline for automated testing, building, and deployment.\nCode Build: Build service for compiling source code, running tests, and creating deployment packages.\nElastic Container Registry: Docker container registry for storing and managing application images.\nComponent Design Frontend Layer:\nReact-based web application hosted on Amplify Responsive design supporting mobile and desktop Real-time video player with adaptive bitrate streaming API Layer:\nRESTful APIs built with Node.js/Express Containerized and deployed on App Runner JWT-based authentication integration Data Layer:\nDynamoDB tables for user data and video metadata S3 buckets for video storage with intelligent tiering ElastiCache for session management and caching Security Layer:\nCognito user pools for authentication WAF rules for application protection IAM roles and policies for access control Streaming Architecture:\nAmazon IVS for live streaming capabilities CloudFront for global video distribution Adaptive bitrate streaming for optimal quality Monitoring \u0026amp; Analytics:\nCloudWatch dashboards for real-time metrics Custom metrics for user engagement tracking Automated alerting for system health 4.Technical Implementation Phase 1: Infrastructure Setup AWS Account Configuration:\nSet up AWS Organizations for multi-account management Configure IAM roles and policies for least privilege access Establish VPC with public/private subnets across multiple AZs Core Services Deployment:\nDeploy DynamoDB tables with proper indexing Configure S3 buckets with encryption and lifecycle policies Set up Cognito user pools and identity pools Configure Route 53 hosted zones and health checks Phase 2: Backend Development API Development:\nBuild RESTful APIs using Node.js/Express framework Implement JWT authentication with Cognito integration Create video upload/processing endpoints Develop user management and content APIs Database Schema:\nUsers table: user_id, email, profile_data, created_at Videos table: video_id, user_id, metadata, upload_status Analytics table: event_id, user_id, video_id, timestamp, action Containerization:\nCreate Docker containers for API services Push images to Elastic Container Registry Configure App Runner for automatic deployment Phase 3: Frontend Development React Application:\nImplement responsive UI components Integrate AWS Amplify SDK for authentication Build video upload interface with progress tracking Create video player with adaptive streaming Key Features:\nUser registration/login with email verification Video upload with drag-and-drop functionality Real-time video streaming with quality selection User dashboard for content management Phase 4: Streaming Integration Amazon IVS Setup:\nConfigure streaming channels and playback URLs Implement adaptive bitrate streaming Set up recording and archival workflows CloudFront Configuration:\nCreate distributions for video content delivery Configure edge locations for global reach Implement caching strategies for optimal performance Phase 5: Security \u0026amp; Monitoring Security Implementation:\nDeploy WAF with custom rules for protection Configure SSL/TLS certificates via Certificate Manager Implement API rate limiting and throttling Monitoring Setup:\nCreate CloudWatch dashboards for system metrics Set up alarms for critical performance indicators Implement logging for audit and troubleshooting Phase 6: CI/CD Pipeline Automated Deployment:\nConfigure CodePipeline for source-to-production workflow Set up CodeBuild for automated testing and building Implement blue-green deployment strategy Testing Strategy:\nUnit tests for API endpoints Integration tests for AWS service interactions Load testing for performance validation 5.Timeline \u0026amp; Milestones Project Duration: 8 Weeks (2 Months) Week 1: Setup \u0026amp; Planning\nAWS account setup and IAM configuration Project requirements finalization Team roles assignment Basic infrastructure deployment (S3, DynamoDB, Cognito) Week 2-3: Backend Development\nRESTful APIs with Node.js/Express JWT authentication with Cognito Video upload endpoints Database schemas implementation App Runner deployment Week 4-5: Frontend Development\nReact application with responsive design User authentication flows Video upload interface Basic video player Amplify deployment Week 6: Integration \u0026amp; Streaming\nFrontend-backend integration CloudFront setup for video delivery Basic streaming functionality Testing and bug fixes Week 7: Security \u0026amp; Testing\nWAF deployment SSL/TLS certificates Security testing Performance optimization Load testing Week 8: Final Deployment\nProduction deployment User acceptance testing Documentation completion Project presentation preparation Key Milestones Milestone 1 (Week 1): Infrastructure Ready\nAWS services configured Development environment accessible Milestone 2 (Week 3): Backend Complete\nAPIs functional Authentication working Milestone 3 (Week 5): Frontend Complete\nUI fully developed Basic video upload/playback working Milestone 4 (Week 8): Production Launch\nSystem deployed and tested Documentation complete 6.Budget Estimation Monthly Operating Costs (USD) Compute Services:\nApp Runner (1 services): $5-15/month Amplify Hosting: $0-5/month Storage \u0026amp; Database:\nS3 Storage: $0-1/month DynamoDB: $0-2/month CloudFront Data Transfer: $0-2/month Streaming Services:\nAmazon IVS (100 hours/month): $150-300/month Video Processing: $20-50/month Security \u0026amp; Monitoring:\nWAF: $5-10/month CloudWatch: $0-3/month Cognito: $0/month Networking:\nRoute 53: $0.5/month CI/CD\nCodePipeline \u0026amp; CodeBuild: $1-3/month ERC: $0-1/month Total Monthly Cost: $17-42/month\n7.Risks Assessment Primary Risks Technical Risks:\nStudents unfamiliar with AWS services → Training and workshops Integration complexity → Start simple, gradually increase Time management → Build buffer time, prioritize core features Resource Risks:\nExceeding AWS Free Tier → Monitor usage, set up alerts Team varying skill levels → Pair programming, mentorship Academic schedule conflicts → Flexible planning Mitigation Solutions Technical Management:\nCloudFormation templates Phase-by-phase testing Dev/staging environments Contingency Plans:\nMVP: Basic video upload/playback Core: User auth + streaming Advanced: Live streaming (optional) Use AWS Educate credits Mock services for demos 8.Expected Outcomes Performance Metrics System Performance:\nVideo upload success rate: \u0026gt;95% Streaming latency: \u0026lt;3 seconds System uptime: \u0026gt;99% Concurrent users: 100+ Page load times: \u0026lt;2 seconds Learning Assessment:\nAWS certification readiness Portfolio-quality project Cloud architecture understanding Technical decision explanation ability Modern development tools proficiency Success Criteria MVP Requirements:\nUser registration/login Basic video upload/playback Secure authentication Responsive interface System monitoring Stretch Goals:\nLive streaming capabilities Advanced analytics Social features Mobile companion app Academic Excellence:\nComprehensive documentation Successful project defense High grades and instructor approval Peer recognition "
},
{
	"uri": "/1/1.2-weed2/",
	"title": "Week 2 Worklog",
	"tags": [],
	"description": "",
	"content": "Week 2 Objectives: Master AWS Identity and Access Management (IAM) for secure access control. Build and configure Amazon VPC networking infrastructure. Implement security measures with VPC firewalls and access controls. Deploy and manage Amazon EC2 instances in custom network environment. Establish hybrid connectivity with Site-to-Site VPN connections. Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 7 Learn AWS Identity and Access Management (IAM) Access Control 09/15/2025 09/15/2025 Link 8 Learn Amazon VPC and do workshop 09/16/2025 09/16/2025 Link 9 Learn fire wall in VPC 09/17/2025 09/17/2025 Link 10 Deploying Amazon EC2 Instances 09/18/2025 09/18/2025 Link 11 Setting Up Site-to-Site VPN Connection in AWS 09/19/2025 09/19/2025 Link Week 2 Achievements: Mastered AWS Identity and Access Management (IAM) (Day 7)\nLearned IAM access control principles Understood users, groups, roles, and policies Implemented proper permission management Built foundational networking with Amazon VPC (Day 8)\nCompleted VPC workshop hands-on Created custom VPC with subnets Configured routing tables and internet gateways Implemented VPC security with firewalls (Day 9)\nConfigured Security Groups Set up Network ACLs Applied network security best practices Successfully deployed Amazon EC2 instances (Day 10)\nLaunched EC2 instances in custom VPC Configured instance types and security settings Connected to instances securely Established Site-to-Site VPN connectivity (Day 11)\nSet up VPN connection between on-premises and AWS Configured routing for hybrid connectivity Tested secure communication across networks "
},
{
	"uri": "/3/",
	"title": "Translated Blogs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/1/1.3-weed3/",
	"title": "Week 3 Worklog",
	"tags": [],
	"description": "",
	"content": "Week 3 Objectives: Explore and master Amazon EC2 advanced features and configurations. Set up web server environments with LAMP stack installation. Deploy and manage Node.js applications on AWS infrastructure. Implement cost governance strategies using AWS IAM policies. Learn application access management and AWS service integration. Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 12 Explore Amazon EC2 09/22/2025 09/22/2025 Link 13 Install LAMP Web Server 09/23/2025 09/23/2025 Link 14 Deploying Node.js Applications 09/24/2025 09/24/2025 Link 15 Implementing Cost Governance Using AWS IAM 09/25/2025 09/25/2025 Link 16 learn how to grant your application access to AWS services 09/26/2025 09/26/2025 Link Week 3 Achievements: Mastered Amazon EC2 advanced features (Day 12)\nExplored EC2 instance types and configurations Learned about storage options and networking Understood scaling and monitoring capabilities Successfully installed LAMP Web Server (Day 13)\nSet up Linux, Apache, MySQL, and PHP stack Configured web server for hosting applications Tested server functionality and performance Deployed Node.js applications on AWS (Day 14)\nSet up Node.js runtime environment Deployed applications with proper configurations Implemented application monitoring and logging Implemented cost governance with AWS IAM (Day 15)\nCreated cost control policies and budgets Set up billing alerts and monitoring Applied resource tagging for cost tracking Learned application access management (Day 16)\nConfigured IAM roles for application access Implemented secure credential management Set up service-to-service authentication "
},
{
	"uri": "/4/",
	"title": "Events Participated",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/1/1.4-weed4/",
	"title": "Week 4 Worklog",
	"tags": [],
	"description": "",
	"content": "Week 4 Objectives: Master Amazon S3 storage service fundamentals and configurations. Build and deploy static websites using S3 hosting capabilities. Implement CloudFront CDN for website performance optimization. Configure S3 bucket versioning and object lifecycle management. Set up cross-region replication for data redundancy and availability. Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 17 Starting with AMAZON S3 09/29/2025 09/29/2025 Link 18 Enable static website 09/30/2025 09/30/2025 Link 19 Accelerate Static Websites with Cloudfront 10/1/2025 10/01/2025 Link 20 Enable Bucket Versioning-Move objects 10/02/2025 10/02/2025 Link 21 Replication Object multi Region 10/03/2025 10/03/2025 Link Week 4 Achievements: Mastered Amazon S3 fundamentals (Day 17)\nCreated and configured S3 buckets Learned S3 storage classes and pricing models Implemented bucket policies and access controls Successfully enabled static website hosting (Day 18)\nConfigured S3 bucket for static website hosting Set up index and error documents Tested website accessibility and functionality Accelerated website performance with CloudFront (Day 19)\nCreated CloudFront distribution for S3 website Configured caching policies and behaviors Improved global content delivery performance Implemented bucket versioning and object management (Day 20)\nEnabled S3 bucket versioning Configured object lifecycle policies Managed object transitions and deletions Set up cross-region replication (Day 21)\nConfigured multi-region object replication Implemented disaster recovery strategies Ensured data redundancy across AWS regions "
},
{
	"uri": "/1/1.5-weed5/",
	"title": "Week 5 Worklog",
	"tags": [],
	"description": "",
	"content": "Week 5 Objectives: Master Amazon RDS for relational database management and operations. Deploy and manage databases using AWS Lightsail platform. Learn containerization and deployment with Lightsail containers. Explore NoSQL database capabilities with Amazon DynamoDB. Begin programmatic AWS interaction using AWS SDK. Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 22 Learn Amazon Relational Database Service 10/06/2025 10/06/2025 Link 23 Deploy a Database on Lightsail 10/07/2025 10/07/2025 Link 24 Deploy a Containers on Lightsail 10/08/2025 10/08/2025 Link 25 Work with Amazon DynamoDB 10/09/2025 10/09/2025 Link 26 Begin with AWS SDK 10/10/2025 10/10/2025 Link Week 5 Achievements: Mastered Amazon RDS fundamentals (Day 22)\nLearned RDS database engines and configurations Understood backup, restore, and maintenance operations Implemented database security and monitoring Successfully deployed database on Lightsail (Day 23)\nSet up managed database instance on Lightsail Configured database parameters and access controls Tested database connectivity and performance Deployed containers on Lightsail platform (Day 24)\nCreated and configured container services Deployed applications using containerization Managed container scaling and monitoring Explored Amazon DynamoDB capabilities (Day 25)\nLearned NoSQL database concepts and operations Created tables and performed CRUD operations Implemented DynamoDB best practices and optimization Started programmatic AWS interaction with SDK (Day 26)\nSet up AWS SDK in development environment Implemented basic AWS service interactions Created automated scripts for resource management "
},
{
	"uri": "/5/",
	"title": "Workshop",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/6/",
	"title": "Self-Assessment",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/1/1.6-weed6/",
	"title": "Week 6 Worklog",
	"tags": [],
	"description": "",
	"content": "Week 6 Objectives: Research and identify appropriate AWS services for project implementation. Design comprehensive system architecture diagrams for the project. Create detailed database design and schema for application requirements. Finalize architecture documentation and technical specifications. Document learning journey and community participation activities. Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 27 Search and learn about project services 10/13/2025 10/13/2025 Link 28 Draw diagram Architecture 10/14/2025 10/14/2025 Link 29 Design database 10/15/2025 10/15/2025 Link 30 Fix diagram and write document 10/16/2025 10/16/2025 Link 31 Write Events Participated 10/17/2025 10/17/2025 Link Week 6 Achievements: Researched and selected optimal AWS services (Day 27)\nAnalyzed project requirements and constraints Identified appropriate AWS services for each component Evaluated cost and performance considerations Created comprehensive architecture diagrams (Day 28)\nDesigned system architecture using AWS services Created visual representations of data flow Documented service interactions and dependencies Designed robust database schema (Day 29)\nCreated detailed database design for application Defined tables, relationships, and constraints Optimized schema for performance and scalability Finalized technical documentation (Day 30)\nRefined architecture diagrams based on feedback Completed comprehensive technical specifications Created deployment and maintenance guidelines Documented learning journey and participation (Day 31)\nCompiled record of events and workshops attended Reflected on learning progress and achievements Shared experiences with the community "
},
{
	"uri": "/7/",
	"title": "Sharing and Feedback",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/1/1.7-weed7/",
	"title": "Week 7 Worklog",
	"tags": [],
	"description": "",
	"content": "Week 7 Objectives: - Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 32 10/20/2025 10/20/2025 Link 33 10/21/2025 10/21/2025 Link 34 10/22/2025 10/22/2025 Link 35 10/23/2025 10/23/2025 Link 36 10/24/2025 10/24/2025 Link Week 7 Achievements: "
},
{
	"uri": "/1/1.8-weed8/",
	"title": "Week 8 Worklog",
	"tags": [],
	"description": "",
	"content": "Week 8 Objectives: Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 37 10/27/2025 10/27/2025 38 10/28/2025 10/28/2025 Link 39 10/29/2025 10/29/2025 Link 40 10/30/2025 10/30/2025 Link 41 10/31/2025 10/31/2025 Link Week 8 Achievements: "
},
{
	"uri": "/1/1.9-weed9/",
	"title": "Week 9 Worklog",
	"tags": [],
	"description": "",
	"content": "Week 9 Objectives: Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 42 11/03/2025 11/03/2025 43 11/04/2025 11/04/2025 Link 44 11/05/2025 11/05/2025 Link 45 11/06/2025 11/06/2025 Link 46 11/07/2025 11/07/2025 Link Week 9 Achievements: "
},
{
	"uri": "/1/1.10-weed10/",
	"title": "Week 10 Worklog",
	"tags": [],
	"description": "",
	"content": "Week 10 Objectives: Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 47 11/10/2025 11/10/2025 48 11/11/2025 11/11/2025 Link 49 11/12/2025 11/12/2025 Link 50 11/13/2025 11/13/2025 Link 51 11/14/2025 11/14/2025 Link Week 10 Achievements: "
},
{
	"uri": "/1/1.11-weed11/",
	"title": "Week 11 Worklog",
	"tags": [],
	"description": "",
	"content": "Week 11 Objectives: Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 52 11/17/2025 11/17/2025 53 11/18/2025 11/18/2025 Link 54 11/19/2025 11/19/2025 Link 55 11/20/2025 11/20/2025 Link 56 11/21/2025 11/21/2025 Link Week 11 Achievements: "
},
{
	"uri": "/1/1.12-weed12/",
	"title": "Week 12 Worklog",
	"tags": [],
	"description": "",
	"content": "Week 12 Objectives: Tasks to be carried out this week: Day Task Start Date Completion Date Reference Material 52 11/24/2025 11/24/2025 53 11/25/2025 11/25/2025 Link 54 11/26/2025 11/26/2025 Link 55 11/27/2025 11/27/2025 Link 56 11/28/2025 11/28/2025 Link Week 12 Achievements: "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]